/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/assets/js/analytics.js":
/*!******************************************!*\
  !*** ./resources/assets/js/analytics.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Active Users JS\n!function (t) {\n  function i(s) {\n    if (e[s]) return e[s].exports;\n    var n = e[s] = {\n      exports: {},\n      id: s,\n      loaded: !1\n    };\n    return t[s].call(n.exports, n, n.exports, i), n.loaded = !0, n.exports;\n  }\n\n  var e = {};\n  return i.m = t, i.c = e, i.p = \"\", i(0);\n}([function (t, i) {\n  \"use strict\";\n\n  gapi.analytics.ready(function () {\n    gapi.analytics.createComponent(\"ActiveUsers\", {\n      initialize: function initialize() {\n        this.activeUsers = 0, gapi.analytics.auth.once(\"signOut\", this.handleSignOut_.bind(this));\n      },\n      execute: function execute() {\n        this.polling_ && this.stop(), this.render_(), gapi.analytics.auth.isAuthorized() ? this.pollActiveUsers_() : gapi.analytics.auth.once(\"signIn\", this.pollActiveUsers_.bind(this));\n      },\n      stop: function stop() {\n        clearTimeout(this.timeout_), this.polling_ = !1, this.emit(\"stop\", {\n          activeUsers: this.activeUsers\n        });\n      },\n      render_: function render_() {\n        var t = this.get();\n        this.container = \"string\" == typeof t.container ? document.getElementById(t.container) : t.container, this.container.innerHTML = t.template || this.template, this.container.querySelector(\"strong\").innerHTML = this.activeUsers;\n      },\n      pollActiveUsers_: function pollActiveUsers_() {\n        var t = this.get(),\n            i = 1e3 * (t.pollingInterval || 5);\n        if (isNaN(i) || 5e3 > i) throw new Error(\"Frequency must be 5 seconds or more.\");\n        this.polling_ = !0, gapi.client.analytics.data.realtime.get({\n          ids: t.ids,\n          metrics: \"rt:activeUsers\"\n        }).then(function (t) {\n          var e = t.result,\n              s = e.totalResults ? +e.rows[0][0] : 0,\n              n = this.activeUsers;\n          this.emit(\"success\", {\n            activeUsers: this.activeUsers\n          }), s != n && (this.activeUsers = s, this.onChange_(s - n)), 1 == this.polling_ && (this.timeout_ = setTimeout(this.pollActiveUsers_.bind(this), i));\n        }.bind(this));\n      },\n      onChange_: function onChange_(t) {\n        var i = this.container.querySelector(\"strong\");\n        i && (i.innerHTML = this.activeUsers), this.emit(\"change\", {\n          activeUsers: this.activeUsers,\n          delta: t\n        }), t > 0 ? this.emit(\"increase\", {\n          activeUsers: this.activeUsers,\n          delta: t\n        }) : this.emit(\"decrease\", {\n          activeUsers: this.activeUsers,\n          delta: t\n        });\n      },\n      handleSignOut_: function handleSignOut_() {\n        this.stop(), gapi.analytics.auth.once(\"signIn\", this.handleSignIn_.bind(this));\n      },\n      handleSignIn_: function handleSignIn_() {\n        this.pollActiveUsers_(), gapi.analytics.auth.once(\"signOut\", this.handleSignOut_.bind(this));\n      },\n      template: '<div class=\"ActiveUsers\">Active Users <strong class=\"ActiveUsers-value\"></strong></div>'\n    });\n  });\n}]);\ngapi.analytics.ready(function () {\n  gapi.analytics.auth.authorize({\n    container: 'embed-api-auth-container',\n    clientid: google_analytics_client_id\n  });\n  var activeUsers = new gapi.analytics.ext.ActiveUsers({\n    container: 'active-users-container',\n    pollingInterval: 5\n  });\n  activeUsers.once('success', function () {\n    var element = this.container.firstChild;\n    var timeout;\n    document.getElementById('embed-api-auth-container').style.display = 'none';\n    this.on('change', function () {\n      var element = this.container.firstChild;\n      clearTimeout(timeout);\n      timeout = setTimeout(function () {\n        element.className = element.className.replace(/ is-(increasing|decreasing)/g, '');\n      }, 3000);\n    });\n  });\n  var data = {\n    ids: ids\n  };\n  activeUsers.set(data).execute();\n  renderWeekOverWeekChart();\n  renderYearOverYearChart();\n  renderTopBrowsersChart();\n  renderTopCountriesChart();\n  newVsReturning();\n  gaReferral();\n\n  function renderWeekOverWeekChart() {\n    var now = moment();\n    var thisWeek = query({\n      'ids': ids,\n      'dimensions': 'ga:date,ga:nthDay',\n      'metrics': 'ga:users',\n      'start-date': moment(now).subtract(1, 'day').day(0).format('YYYY-MM-DD'),\n      'end-date': moment(now).format('YYYY-MM-DD')\n    });\n    var lastWeek = query({\n      'ids': ids,\n      'dimensions': 'ga:date,ga:nthDay',\n      'metrics': 'ga:users',\n      'start-date': moment(now).subtract(1, 'day').day(0).subtract(1, 'week').format('YYYY-MM-DD'),\n      'end-date': moment(now).subtract(1, 'day').day(6).subtract(1, 'week').format('YYYY-MM-DD')\n    });\n    Promise.all([thisWeek, lastWeek]).then(function (results) {\n      var data1 = results[0].rows.map(function (row) {\n        return +row[2];\n      });\n      var data2 = results[1].rows.map(function (row) {\n        return +row[2];\n      });\n      var labels = results[1].rows.map(function (row) {\n        return +row[0];\n      });\n      labels = labels.map(function (label) {\n        return moment(label, 'YYYYMMDD').format('ddd');\n      });\n      var data = {\n        labels: labels,\n        datasets: [{\n          label: 'Last Week',\n          fillColor: 'rgba(200,200,200,0.5)',\n          pointColor: 'rgba(150,150,150,1)',\n          pointStrokeColor: '#fff',\n          data: data2\n        }, {\n          label: 'This Week',\n          fillColor: 'rgba(100,100,100,0.5)',\n          pointColor: 'rgba(65,65,65,1)',\n          pointStrokeColor: '#fff',\n          data: data1\n        }]\n      };\n      new Chart(makeCanvas('chart-1-container')).Line(data);\n      generateLegend('legend-1-container', data.datasets);\n    });\n  }\n\n  function renderYearOverYearChart() {\n    var now = moment();\n    var thisYear = query({\n      'ids': ids,\n      'dimensions': 'ga:month,ga:nthMonth',\n      'metrics': 'ga:users',\n      'start-date': moment(now).date(1).month(0).format('YYYY-MM-DD'),\n      'end-date': moment(now).format('YYYY-MM-DD')\n    });\n    var lastYear = query({\n      'ids': ids,\n      'dimensions': 'ga:month,ga:nthMonth',\n      'metrics': 'ga:users',\n      'start-date': moment(now).subtract(1, 'year').date(1).month(0).format('YYYY-MM-DD'),\n      'end-date': moment(now).date(1).month(0).subtract(1, 'day').format('YYYY-MM-DD')\n    });\n    Promise.all([thisYear, lastYear]).then(function (results) {\n      var data1 = results[0].rows.map(function (row) {\n        return +row[2];\n      });\n      var data2 = results[1].rows.map(function (row) {\n        return +row[2];\n      });\n      var labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n      for (var i = 0, len = labels.length; i < len; i++) {\n        if (data1[i] === undefined) data1[i] = null;\n        if (data2[i] === undefined) data2[i] = null;\n      }\n\n      var data = {\n        labels: labels,\n        datasets: [{\n          label: 'Last Year',\n          fillColor: 'rgba(50,50,50,0.5)',\n          data: data2\n        }, {\n          label: 'This Year',\n          fillColor: 'rgba(130,130,130,0.5)',\n          data: data1\n        }]\n      };\n      new Chart(makeCanvas('chart-2-container')).Bar(data);\n      generateLegend('legend-2-container', data.datasets);\n    })[\"catch\"](function (err) {\n      console.error(err.stack);\n    });\n  }\n\n  function renderTopBrowsersChart() {\n    query({\n      'ids': ids,\n      'dimensions': 'ga:browser',\n      'metrics': 'ga:pageviews',\n      'sort': '-ga:pageviews',\n      'max-results': 5\n    }).then(function (response) {\n      var data = [];\n      var colors = ['#333333', '#555555', '#777777', '#999999', '#cccccc'];\n\n      if (typeof response.rows !== 'undefined') {\n        response.rows.forEach(function (row, i) {\n          data.push({\n            value: +row[1],\n            color: colors[i],\n            label: row[0]\n          });\n        });\n        new Chart(makeCanvas('chart-3-container')).Doughnut(data);\n        generateLegend('legend-3-container', data);\n      }\n    });\n  }\n\n  function renderTopCountriesChart() {\n    query({\n      'ids': ids,\n      'dimensions': 'ga:country',\n      'metrics': 'ga:sessions',\n      'sort': '-ga:sessions',\n      'max-results': 5\n    }).then(function (response) {\n      var data = [];\n      var colors = ['#333333', '#555555', '#777777', '#999999', '#cccccc'];\n\n      if (typeof response.rows !== 'undefined') {\n        response.rows.forEach(function (row, i) {\n          data.push({\n            label: row[0],\n            value: +row[1],\n            color: colors[i]\n          });\n        });\n        new Chart(makeCanvas('chart-4-container')).Doughnut(data);\n        generateLegend('legend-4-container', data);\n      }\n    });\n  }\n\n  function newVsReturning() {\n    query({\n      'ids': ids,\n      'dimensions': 'ga:userType',\n      'metrics': 'ga:users'\n    }).then(function (response) {\n      var $newUsers = document.querySelector('.new-users');\n      var $returningUsers = document.querySelector('.returning-users');\n\n      if (typeof response.rows !== 'undefined') {\n        $newUsers.innerHTML = response.rows[0][1];\n\n        if (response.rows[1]) {\n          $returningUsers.innerHTML = response.rows[1][1];\n        }\n      }\n    });\n  }\n\n  function gaReferral() {\n    query({\n      'ids': ids,\n      'dimensions': 'ga:sourceMedium',\n      'metrics': 'ga:sessions',\n      'sort': '-ga:sessions',\n      'max-results': 10\n    }).then(function (response) {\n      var li = '';\n\n      if (typeof response.rows !== 'undefined') {\n        response.rows.forEach(function (v) {\n          li += '<tr><td lass=\"medium-source\">' + v[0] + '</td><td class=\"medium-sesh\">' + v[1] + '</td></tr>';\n        });\n        var $tableBody = document.querySelector('.top-ten-sources tbody');\n        $tableBody.innerHTML = li;\n      }\n    });\n  }\n\n  function query(params) {\n    return new Promise(function (resolve, reject) {\n      var data = new gapi.analytics.report.Data({\n        query: params\n      });\n      data.once('success', function (response) {\n        resolve(response);\n      }).once('error', function (response) {\n        reject(response);\n      }).execute();\n    });\n  }\n\n  function makeCanvas(id) {\n    var container = document.getElementById(id);\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    container.innerHTML = '';\n    canvas.width = '100%'; //container.offsetWidth;\n\n    canvas.height = container.offsetHeight;\n    container.appendChild(canvas);\n    return ctx;\n  }\n\n  function generateLegend(id, items) {\n    var legend = document.getElementById(id);\n    legend.innerHTML = items.map(function (item) {\n      var color = item.color || item.fillColor;\n      var label = item.label;\n      return '<li><i style=\"background:' + color + '\"></i>' + label + '</li>';\n    }).join('');\n  }\n\n  Chart.defaults.global.animationSteps = 60;\n  Chart.defaults.global.animationEasing = 'easeInOutQuart';\n  Chart.defaults.global.responsive = true;\n  Chart.defaults.global.maintainAspectRatio = false;\n  window.dispatchEvent(new Event('resize'));\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/analytics.js\n");

/***/ }),

/***/ 1:
/*!************************************************!*\
  !*** multi ./resources/assets/js/analytics.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/donjones/Sites/neutrino-laravel8/vendor/newelement/neutrino/resources/assets/js/analytics.js */"./resources/assets/js/analytics.js");


/***/ })

/******/ });